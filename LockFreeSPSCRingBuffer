//Lock free SPSC simple ring buffer using power of 2 sizing
#pragma once
#include <atomic>
#include <memory>

template<typename T>
class SPSCRingBuffer {
private:
    size_t capacity_;
    size_t mask_;
    std::atomic<size_t> head_{0};  // producer writes
    std::atomic<size_t> tail_{0};  // consumer writes
    std::unique_ptr<T[]> buffer_;

public:
    explicit SPSCRingBuffer(size_t cap) {
        // Round up to power of 2
        capacity_ = 1;
        while (capacity_ < cap) capacity_ <<= 1;
        mask_ = capacity_ - 1;
        buffer_ = std::make_unique<T[]>(capacity_);
    }

    bool enqueue(const T& item) {
        size_t h = head_.load(std::memory_order_relaxed);
        size_t next_h = (h + 1) & mask_;
        
        if (next_h == tail_.load(std::memory_order_acquire))
            return false;  // full
            
        buffer_[h] = item;
        head_.store(next_h, std::memory_order_release);
        return true;
    }

    bool dequeue(T& item) {
        size_t t = tail_.load(std::memory_order_relaxed);
        
        if (t == head_.load(std::memory_order_acquire))
            return false;  // empty
            
        item = buffer_[t];
        tail_.store((t + 1) & mask_, std::memory_order_release);
        return true;
    }

    size_t size() const {
        return (head_.load(std::memory_order_acquire) - tail_.load(std::memory_order_acquire)) & mask_;
    }
};
