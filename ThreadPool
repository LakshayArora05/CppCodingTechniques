//Implement a thread pool class that manages a pool of worker threads to execute submitted tasks asynchronously. The thread pool should maintain a fixed number of threads and a task queue to handle incoming tasks
#include <thread>
#include <vector>
#include <queue>
#include <functional>
#include <mutex>
#include <condition_variable>
#include <atomic>
#include <future>

class ThreadPool {
private:
    std::vector<std::thread> workers;
    std::queue<std::function<void()>> tasks;
    
    mutable std::mutex queue_mutex;
    std::condition_variable condition;
    std::atomic<bool> stop;
    
    void worker_thread() {
        while (true) {
            std::function<void()> task;
            
            {
                std::unique_lock<std::mutex> lock(queue_mutex);
                condition.wait(lock, [this] {
                    return stop || !tasks.empty();
                });
                
                if (stop && tasks.empty()) {
                    return;
                }
                
                task = std::move(tasks.front());
                tasks.pop();
            }
            
            try {
                task();
            } catch (...) {
                // Prevent worker thread from crashing
            }
        }
    }
    
public:
    explicit ThreadPool(size_t num_threads = std::thread::hardware_concurrency()) 
        : stop(false) {
        
        for (size_t i = 0; i < num_threads; ++i) {
            workers.emplace_back([this] {
                worker_thread();
            });
        }
    }
    
    ~ThreadPool() {
        shutdown();
    }
    
    template<typename F, typename... Args>
    auto submit(F&& f, Args&&... args) -> std::future<typename std::result_of<F(Args...)>::type> {
        using return_type = typename std::result_of<F(Args...)>::type;
        
        auto task = std::make_shared<std::packaged_task<return_type()>>(
            std::bind(std::forward<F>(f), std::forward<Args>(args)...)
        );
        
        std::future<return_type> result = task->get_future();
        
        {
            std::unique_lock<std::mutex> lock(queue_mutex);
            
            if (stop) {
                throw std::runtime_error("Cannot submit task to stopped thread pool");
            }
            
            tasks.emplace([task]() {
                (*task)();
            });
        }
        
        condition.notify_one();
        return result;
    }
    
    void submit_task(std::function<void()> task) {
        {
            std::unique_lock<std::mutex> lock(queue_mutex);
            
            if (stop) {
                throw std::runtime_error("Cannot submit task to stopped thread pool");
            }
            
            tasks.emplace(std::move(task));
        }
        
        condition.notify_one();
    }
    
    size_t size() const {
        return workers.size();
    }
    
    size_t pending_tasks() const {
        std::unique_lock<std::mutex> lock(queue_mutex);
        return tasks.size();
    }
    
    void shutdown() {
        {
            std::unique_lock<std::mutex> lock(queue_mutex);
            stop = true;
        }
        
        condition.notify_all();
        
        for (std::thread& worker : workers) {
            if (worker.joinable()) {
                worker.join();
            }
        }
        
        workers.clear();
    }
};
