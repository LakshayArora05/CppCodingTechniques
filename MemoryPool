//Implemented a memory pool class that provides efficient allocation and deallocation of memory from a pre-allocated chunk. 
//The memory pool should be able to allocate memory for objects of any type while managing memory allocation internally.

#include <new>
#include <stdexcept>
#include <algorithm>

template<typename T>
class MemoryPool {
private:
    struct FreeBlock {
        FreeBlock* next;
    };
    
    char* memory_chunk;           // Pre-allocated memory chunk
    FreeBlock* free_list;         // Head of free list
    std::size_t block_size;       // Size of each block
    std::size_t total_blocks;     // Total number of blocks
    std::size_t allocated_blocks; // Number of currently allocated blocks
    bool owns_memory;             // Whether this pool owns the memory
    
    // Calculate aligned block size
    std::size_t calculate_block_size() const {
        std::size_t obj_size = sizeof(T);
        std::size_t ptr_size = sizeof(FreeBlock*);
        std::size_t required_size = std::max(obj_size, ptr_size);
        
        // Align to pointer boundary
        std::size_t alignment = alignof(T);
        return (required_size + alignment - 1) & ~(alignment - 1);
    }
    
    // Initialize the free list
    void initialize_free_list() {
        free_list = nullptr;
        allocated_blocks = 0;
        
        // Link all blocks in the free list
        for (std::size_t i = 0; i < total_blocks; ++i) {
            char* block_addr = memory_chunk + i * block_size;
            FreeBlock* block = reinterpret_cast<FreeBlock*>(block_addr);
            block->next = free_list;
            free_list = block;
        }
    }
    
    // Check if pointer belongs to this pool
    bool is_valid_pointer(void* ptr) const {
        char* char_ptr = static_cast<char*>(ptr);
        return char_ptr >= memory_chunk && 
               char_ptr < memory_chunk + total_blocks * block_size &&
               (char_ptr - memory_chunk) % block_size == 0;
    }

public:
    // Constructor - creates pool with specified number of blocks
    explicit MemoryPool(std::size_t num_blocks) 
        : total_blocks(num_blocks), owns_memory(true) {
        if (num_blocks == 0) {
            throw std::invalid_argument("Number of blocks must be greater than 0");
        }
        
        block_size = calculate_block_size();
        std::size_t total_size = block_size * total_blocks;
        
        // Allocate memory (operator new provides suitable alignment for any type)
        memory_chunk = static_cast<char*>(::operator new(total_size));
        if (!memory_chunk) {
            throw std::bad_alloc();
        }
        
        initialize_free_list();
    }
    
    // Constructor - uses pre-allocated memory
    MemoryPool(void* memory, std::size_t memory_size) 
        : owns_memory(false) {
        if (!memory || memory_size == 0) {
            throw std::invalid_argument("Invalid memory or size");
        }
        
        block_size = calculate_block_size();
        total_blocks = memory_size / block_size;
        
        if (total_blocks == 0) {
            throw std::invalid_argument("Memory size too small for even one block");
        }
        
        memory_chunk = static_cast<char*>(memory);
        initialize_free_list();
    }
    
    // Destructor
    ~MemoryPool() {
        if (owns_memory && memory_chunk) {
            ::operator delete(memory_chunk);
        }
    }
    
    // Delete copy constructor and assignment operator
    MemoryPool(const MemoryPool&) = delete;
    MemoryPool& operator=(const MemoryPool&) = delete;
    
    // Move constructor
    MemoryPool(MemoryPool&& other) noexcept 
        : memory_chunk(other.memory_chunk),
          free_list(other.free_list),
          block_size(other.block_size),
          total_blocks(other.total_blocks),
          allocated_blocks(other.allocated_blocks),
          owns_memory(other.owns_memory) {
        other.memory_chunk = nullptr;
        other.free_list = nullptr;
        other.owns_memory = false;
    }
    
    // Move assignment operator
    MemoryPool& operator=(MemoryPool&& other) noexcept {
        if (this != &other) {
            if (owns_memory && memory_chunk) {
                ::operator delete(memory_chunk);
            }
            
            memory_chunk = other.memory_chunk;
            free_list = other.free_list;
            block_size = other.block_size;
            total_blocks = other.total_blocks;
            allocated_blocks = other.allocated_blocks;
            owns_memory = other.owns_memory;
            
            other.memory_chunk = nullptr;
            other.free_list = nullptr;
            other.owns_memory = false;
        }
        return *this;
    }
    
    // Allocate memory for one object
    T* allocate() {
        if (!free_list) {
            throw std::bad_alloc(); // Pool exhausted
        }
        
        FreeBlock* block = free_list;
        free_list = free_list->next;
        ++allocated_blocks;
        
        return reinterpret_cast<T*>(block);
    }
    
    // Deallocate memory
    void deallocate(T* ptr) {
        if (!ptr) return;
        
        if (!is_valid_pointer(ptr)) {
            throw std::invalid_argument("Pointer does not belong to this pool");
        }
        
        FreeBlock* block = reinterpret_cast<FreeBlock*>(ptr);
        block->next = free_list;
        free_list = block;
        --allocated_blocks;
    }
    
    // Construct object in place
    template<typename... Args>
    T* construct(Args&&... args) {
        T* ptr = allocate();
        try {
            new(ptr) T(std::forward<Args>(args)...);
            return ptr;
        } catch (...) {
            deallocate(ptr);
            throw;
        }
    }
    
    // Destroy object and deallocate
    void destroy(T* ptr) {
        if (ptr) {
            ptr->~T();
            deallocate(ptr);
        }
    }
    
    // Pool statistics
    std::size_t total_capacity() const { return total_blocks; }
    std::size_t allocated_count() const { return allocated_blocks; }
    std::size_t available_count() const { return total_blocks - allocated_blocks; }
    bool is_empty() const { return allocated_blocks == 0; }
    bool is_full() const { return allocated_blocks == total_blocks; }
    std::size_t get_block_size() const { return block_size; }
    
    // Reset pool (deallocate all blocks)
    void reset() {
        initialize_free_list();
    }
};
