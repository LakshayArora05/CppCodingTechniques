#pragma once
#include <atomic>
#include <memory>

template<typename T>
class MPMCRingBuffer {
private:
    struct Cell {
        std::atomic<size_t> sequence{0};
        T data;
    };
    
    size_t capacity_;
    size_t mask_;
    std::atomic<size_t> enqueue_pos_{0};
    std::atomic<size_t> dequeue_pos_{0};
    std::unique_ptr<Cell[]> buffer_;
    
public:
    explicit MPMCRingBuffer(size_t capacity) {
        // Round up to power of 2
        capacity_ = 1;
        while (capacity_ < capacity) capacity_ <<= 1;
        mask_ = capacity_ - 1;
        
        buffer_ = std::make_unique<Cell[]>(capacity_);
        
        // Initialize sequence numbers
        for (size_t i = 0; i < capacity_; ++i) {
            buffer_[i].sequence.store(i, std::memory_order_relaxed);
        }
    }
    
    bool enqueue(const T& item) {
        Cell* cell;
        size_t pos = enqueue_pos_.load(std::memory_order_relaxed);
        
        for (;;) {
            cell = &buffer_[pos & mask_];
            size_t seq = cell->sequence.load(std::memory_order_acquire);
            intptr_t dif = (intptr_t)seq - (intptr_t)pos;
            
            if (dif == 0) {
                // Try to claim this cell
                if (enqueue_pos_.compare_exchange_weak(pos, pos + 1, std::memory_order_relaxed)) {
                    break;
                }
            } else if (dif < 0) {
                // Buffer is full
                return false;
            } else {
                // Another producer got ahead, update pos
                pos = enqueue_pos_.load(std::memory_order_relaxed);
            }
        }
        
        // Write data and make it available
        cell->data = item;
        cell->sequence.store(pos + 1, std::memory_order_release);
        return true;
    }
    
    bool dequeue(T& item) {
        Cell* cell;
        size_t pos = dequeue_pos_.load(std::memory_order_relaxed);
        
        for (;;) {
            cell = &buffer_[pos & mask_];
            size_t seq = cell->sequence.load(std::memory_order_acquire);
            intptr_t dif = (intptr_t)seq - (intptr_t)(pos + 1);
            
            if (dif == 0) {
                // Try to claim this cell
                if (dequeue_pos_.compare_exchange_weak(pos, pos + 1, std::memory_order_relaxed)) {
                    break;
                }
            } else if (dif < 0) {
                // Buffer is empty
                return false;
            } else {
                // Another consumer got ahead, update pos
                pos = dequeue_pos_.load(std::memory_order_relaxed);
            }
        }
        
        // Read data and make cell available for producers
        item = cell->data;
        cell->sequence.store(pos + mask_ + 1, std::memory_order_release);
        return true;
    }
    
    size_t size() const {
        size_t enq = enqueue_pos_.load(std::memory_order_acquire);
        size_t deq = dequeue_pos_.load(std::memory_order_acquire);
        return enq - deq;
    }
    
    bool empty() const {
        return size() == 0;
    }
};

// Usage:
// MPMCRingBuffer<int> buffer(1024);
// 
// // Multiple producers can call:
// buffer.enqueue(42);
// 
// // Multiple consumers can call:
// int value;
// if (buffer.dequeue(value)) { /* got value */ }
